apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Values.server.name }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    name: {{ $.Values.server.name }}
    app.kubernetes.io/name: {{ $.Values.server.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  updateStrategy:
    type: RollingUpdate 
  serviceName: "{{ $.Values.server.name }}"
  replicas: 1
  selector:
    matchLabels:
      app: {{ $.Values.server.name }}
      app.kubernetes.io/name: {{ $.Values.server.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ $.Values.server.name }}
        app.kubernetes.io/name: {{ $.Values.server.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      volumes:
      - name: {{ $.Values.server.name }}-pv
        persistentVolumeClaim:
          claimName: {{ $.Values.server.name }}-pvc
      - name: certificates
        emptyDir:
          medium: Memory
      - name: config-volume
        configMap:
          name: fabric-config
      initContainers:
      - name: certificates-init
        image: {{ $.Values.vault.image }}
        env:
        - name: FABRIC_USER
          value: {{ $.Values.server.username}}
        - name: MOUNT_PATH
          value: /secret
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: "{{ $.Values.vault.secretprefix }}"
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: PEERNAME
          value: {{ $.Values.connection.peer }}
        command: ["sh", "-c"]
        args:
        - |-
        
          #!/usr/bin/env sh
          validateVaultResponse () {
          if echo ${2} | grep "errors"; then
           echo "ERROR: unable to retrieve ${3}: ${4}"
           exit 1
           fi
          }
          
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')          
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"
          
          vault_secret_key="${VAULT_SECRET_PREFIX}/users/${FABRIC_USER}/msp"
          echo "Getting TLS certificates from Vault using key $vault_secret_key"
          
          OUTPUT_PATH="${MOUNT_PATH}/tls"
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
            
          USER_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["signcerts"]')
          USER_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')
          
          mkdir -p ${OUTPUT_PATH}
          echo "${USER_CERT}" >> ${OUTPUT_PATH}/${FABRIC_USER}.cert
          echo "${USER_KEY}" >> ${OUTPUT_PATH}/${FABRIC_USER}.pem
          
          
          vault_secret_key="${VAULT_SECRET_PREFIX}/peers/${PEERNAME}/msp"
          echo "Getting MSP certificates from Vault using key $vault_secret_key"
          
          OUTPUT_PATH="${MOUNT_PATH}/msp"
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 

          ORG_TLS_CERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tlscacerts"]')          
          mkdir -p ${OUTPUT_PATH}/tlscacerts
          echo "${ORG_TLS_CERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.pem
          
          
          vault_secret_key="${VAULT_SECRET_PREFIX}/orderer/tls"
          echo "Getting Orderer certificates from Vault using key $vault_secret_key"

          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 

          ORDERER_TLS_CERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["ca.crt"]')
          echo "${ORDERER_TLS_CERTS}" >> ${OUTPUT_PATH}/tlscacerts/orderer-tlsca.pem

          echo "DONE"
        volumeMounts:
        - name: certificates
          mountPath: /secret
      containers:
      - name: restserver
        image: "{{ $.Values.server.image }}"
        imagePullPolicy: Always
        command: ["sh", "-c", "yarn start"]
        ports:
        - name: api
          containerPort: {{ $.Values.service.ports.targetPort }}
        env:
          - name: ORG_ID
            value: {{ $.Values.server.localmspid }}
          - name: USER
            value: {{ $.Values.server.username }}
          - name: CERT
            value: {{ $.Values.server.cert_path }}
          - name: KEY
            value: {{ $.Values.server.key_path }}
        volumeMounts:
        - name: certificates
          mountPath: /secret
          readOnly: false
        - name: config-volume
          mountPath: /app/fabric-connection.yaml
          subPath: fabric-connection.yaml
          readOnly: false
