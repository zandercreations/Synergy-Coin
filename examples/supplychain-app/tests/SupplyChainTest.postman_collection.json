{
	"info": {
		"_postman_id": "e65221ed-041a-4025-908e-55ed3f99b466",
		"name": "SupplyChainTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "General",
			"item": [
				{
					"name": "Manufacturer NodeInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0510948a-d166-420e-95a5-c774640d5be6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check Organization\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.organization).to.eql(\"Manufacturer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{manufacturer-host}}/api/v1/node-Organization",
							"protocol": "https",
							"host": [
								"{{manufacturer-host}}"
							],
							"path": [
								"api",
								"v1",
								"node-Organization"
							]
						},
						"description": "Get organization name"
					},
					"response": [
						{
							"name": "Node Info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/node-info",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"node-info"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 07 Feb 2019 18:54:31 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"organisation\": \"PartyA\"\n}"
						}
					]
				},
				{
					"name": "Manufacturer NodeOrgUnit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c68424c-3f0d-4b37-a785-bb6252fd72e6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const manufacturerOU = pm.environment.get(\"manufacturerOU\");",
									"pm.test(\"Check OU\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.organizationUnit).to.eql(manufacturerOU);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{manufacturer-host}}/api/v1/node-organizationunit",
							"protocol": "https",
							"host": [
								"{{manufacturer-host}}"
							],
							"path": [
								"api",
								"v1",
								"node-organizationunit"
							]
						},
						"description": "Get organization name"
					},
					"response": [
						{
							"name": "Node Info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/v1/node-info",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"node-info"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 07 Feb 2019 18:54:31 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"organisation\": \"PartyA\"\n}"
						}
					]
				},
				{
					"name": "Manufacturer Scan Container as new",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "351b4f10-b093-49ad-a9fc-2083f613cb1c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Container is new\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"new\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
						},
						"url": {
							"raw": "https://{{manufacturer-host}}/api/v1/{{containerID}}/scan",
							"protocol": "https",
							"host": [
								"{{manufacturer-host}}"
							],
							"path": [
								"api",
								"v1",
								"{{containerID}}",
								"scan"
							]
						},
						"description": "Get container states"
					},
					"response": []
				}
			],
			"description": "General APIs",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Manufacturer creates new Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16e6f0c8-0ec6-43c5-9873-a21b715b13b0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Check correct container is created\", function () {",
							"    pm.expect(jsonData.generatedID).to.eql(container);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"misc\": {\n        \"name\": \"Medicine Container\"\n    },\n    \"trackingID\": \"{{containerID}}\",\n    \"counterparties\": [\n    \t\"{{carrierID}}\",\n    \t\"{{warehouseID}}\",\n    \t\"{{storeID}}\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/container",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"container"
					]
				},
				"description": "Post to create a new container"
			},
			"response": [
				{
					"name": "Container Post New",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"PartyB\"]\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/container",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"container"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:47:50 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"generatedID\": \"bbf55c20-ad4e-4c6b-983d-ed444c24ee00\"\n}"
				}
			]
		},
		{
			"name": "Manufacturer checks Container created",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5436f9d-85ea-4033-8f14-1d84f9cdfb14",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Check correct container is fetched\", function () {",
							"    pm.expect(jsonData.trackingID).to.eql(container);",
							"});",
							"const manufacturer = pm.environment.get(\"manufacturerID\");",
							"pm.test(\"Check Custodian\", function () {",
							"    pm.expect(jsonData.custodian.toLowerCase()).to.contain(manufacturer.toLowerCase());",
							"});",
							"pm.test(\"Check participants contain counterparties\", function () {",
							"    var parties = jsonData.participants;",
							"    pm.expect(parties.length).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"PartyB\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/container/{{containerID}}",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"container",
						"{{containerID}}"
					]
				},
				"description": "Get container states"
			},
			"response": [
				{
					"name": "Container Get All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/v1/container",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"container"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "409"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:50:18 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"health\": \"String\",\n        \"contents\": [],\n        \"otherData\": \"String\",\n        \"custodian\": \"O=PartyA, L=London, C=GB\",\n        \"trackingID\": \"{{containerID}}\",\n        \"containerID\": null,\n        \"timestamp\": 1549565268369,\n        \"linearId\": {\n            \"externalId\": null,\n            \"id\": \"bbf55c20-ad4e-4c6b-983d-ed444c24ee00\"\n        },\n        \"participants\": [\n            \"O=PartyB, L=New York, C=US\",\n            \"O=PartyA, L=London, C=GB\"\n        ]\n    }\n]"
				}
			]
		},
		{
			"name": "Manufacturer creates new Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14145b9d-2cd8-4c4c-be9f-6c2234e4dc6e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"const product = pm.environment.get(\"productID\");",
							"pm.test(\"Check correct product is created\", function () {",
							"    pm.expect(jsonData.generatedID).to.eql(product);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productName\": \"Dextrose\",\n    \"misc\": {\n        \"name\": \"Expensive Dextrose\"\n    },\n    \"trackingID\": \"{{productID}}\",\n    \"counterparties\": [\n    \t\"{{storeID}}\",\n    \t\"{{carrierID}}\",\n    \t\"{{warehouseID}}\"\n    ]\n}"
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/product",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"product"
					]
				},
				"description": "Create a new product state"
			},
			"response": [
				{
					"name": "Product Post New",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"productName\":\"Product\",\n \"health\": \"String\",\n \"sold\":false,\n \"recalled\":false,\n \"otherData\": \"String\",\n \"trackingID\": \"{{productID}}\",\n \"containerID\": null,\n \"counterparties\": [\"PartyB\"]\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:50:35 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"generatedID\": \"5409f3d8-6ebb-4ec9-bf06-c21f61b1f55e\"\n}"
				}
			]
		},
		{
			"name": "Manufacturer checks Product created",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2990a21-7d8b-4cdd-a437-977ff50f3511",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const product = pm.environment.get(\"productID\");",
							"var jsonData = pm.response.json();",
							"pm.test(\"Check correct product is fetched\", function () {",
							"    pm.expect(jsonData.trackingID).to.eql(product);",
							"});",
							"const manufacturer = pm.environment.get(\"manufacturerID\");",
							"pm.test(\"Check Custodian\", function () {",
							"    pm.expect(jsonData.custodian.toLowerCase()).to.contain(manufacturer.toLowerCase());",
							"});",
							"pm.test(\"Check participants contain counterparties\", function () {",
							"    var parties = jsonData.participants;",
							"    pm.expect(parties.length).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"productName\":\"Product\",\n \"health\": \"String\",\n \"sold\":false,\n \"recalled\":false,\n \"otherData\": \"String\",\n \"trackingID\": \"{{productID}}\",\n \"containerID\": null,\n \"counterparties\": [\"PartyB\"]\n}"
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/product/{{productID}}",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"product",
						"{{productID}}"
					]
				},
				"description": "Get all product states from vault"
			},
			"response": [
				{
					"name": "Product Get All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/v1/product/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "458"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:51:07 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"productName\": \"Product\",\n        \"health\": \"String\",\n        \"sold\": false,\n        \"recalled\": false,\n        \"otherData\": \"String\",\n        \"custodian\": \"O=PartyA, L=London, C=GB\",\n        \"trackingID\": \"{{productID}}\",\n        \"containerID\": null,\n        \"timestamp\": 1549565435354,\n        \"linearId\": {\n            \"externalId\": null,\n            \"id\": \"5409f3d8-6ebb-4ec9-bf06-c21f61b1f55e\"\n        },\n        \"participants\": [\n            \"O=PartyB, L=New York, C=US\",\n            \"O=PartyA, L=London, C=GB\"\n        ]\n    }\n]"
				}
			]
		},
		{
			"name": "Check Containerless products",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7899d4fc-29e5-4304-9f14-85a62ca0964e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const product = pm.environment.get(\"productID\");",
							"pm.test(\"Check correct product is fetched\", function () {",
							"    pm.expect(pm.response.text()).to.include(product);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/product/containerless",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"product",
						"containerless"
					]
				},
				"description": "Method to see tracking history of an item as it was modified and what time ownership changed (in milliseconds from some root time like Jan 1990 or something)"
			},
			"response": [
				{
					"name": "History of item created at A, moved to B, and moved to A again",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/9e029d9d-c3e8-4b74-96e9-14250aecdf2f/history",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"9e029d9d-c3e8-4b74-96e9-14250aecdf2f",
								"history"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "214"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:52:46 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565435354\n    },\n    {\n        \"party\": \"O=PartyB, L=New York, C=US\",\n        \"time\": 1549565524382\n    },\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565561769\n    }\n]"
				}
			]
		},
		{
			"name": "Manufacturer packages Item into Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c17ddb48-cecc-40ab-ba4a-4879ac05c3eb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Response has containerID\", function () {",
							"    pm.response.to.have.body(container);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"contents\":\"{{productID}}\"\n}"
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/container/{{containerID}}/package",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"container",
						"{{containerID}}",
						"package"
					]
				},
				"description": "UUID in url is the tracking id of container... body is of the object being contained"
			},
			"response": [
				{
					"name": "Package Item into Container (Container id was 2c8754c0-5395-4069-971b-0ff97dc9c76d and product id was 9e029d9d-c3e8-4b74-96e9-14250aecdf2f)",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"contents\":\"9e029d9d-c3e8-4b74-96e9-14250aecdf2f\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/container/2c8754c0-5395-4069-971b-0ff97dc9c76d/package",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"container",
								"2c8754c0-5395-4069-971b-0ff97dc9c76d",
								"package"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:55:13 GMT"
						}
					],
					"cookie": [],
					"body": "\"2c8754c0-5395-4069-971b-0ff97dc9c76d\""
				}
			]
		},
		{
			"name": "Manufacturer checks Product Packaged",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2990a21-7d8b-4cdd-a437-977ff50f3511",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var product = pm.environment.get(\"productID\");",
							"var jsonData = pm.response.json();",
							"pm.test(\"Check correct product is fetched\", function () {",
							"    pm.expect(jsonData.trackingID).to.eql(product);",
							"});",
							"const manufacturer = pm.environment.get(\"manufacturerID\");",
							"pm.test(\"Check Custodian\", function () {",
							"    pm.expect(jsonData.custodian.toLowerCase()).to.contain(manufacturer.toLowerCase());",
							"});",
							"pm.test(\"Check participants contain counterparties\", function () {",
							"    var parties = jsonData.participants;",
							"    pm.expect(parties.length).to.eql(4);",
							"});",
							"var container = pm.environment.get(\"containerID\");",
							"pm.test(\"Check product is in correct container\", function () {",
							"    pm.expect(jsonData.containerID).to.eql(container);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"productName\":\"Product\",\n \"health\": \"String\",\n \"sold\":false,\n \"recalled\":false,\n \"otherData\": \"String\",\n \"trackingID\": \"{{productID}}\",\n \"containerID\": null,\n \"counterparties\": [\"PartyB\"]\n}"
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/product/{{productID}}",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"product",
						"{{productID}}"
					]
				},
				"description": "Get all product states from vault"
			},
			"response": [
				{
					"name": "Product Get All",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/v1/product/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "458"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:51:07 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"productName\": \"Product\",\n        \"health\": \"String\",\n        \"sold\": false,\n        \"recalled\": false,\n        \"otherData\": \"String\",\n        \"custodian\": \"O=PartyA, L=London, C=GB\",\n        \"trackingID\": \"{{productID}}\",\n        \"containerID\": null,\n        \"timestamp\": 1549565435354,\n        \"linearId\": {\n            \"externalId\": null,\n            \"id\": \"5409f3d8-6ebb-4ec9-bf06-c21f61b1f55e\"\n        },\n        \"participants\": [\n            \"O=PartyB, L=New York, C=US\",\n            \"O=PartyA, L=London, C=GB\"\n        ]\n    }\n]"
				}
			]
		},
		{
			"name": "Carrier claims Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c074ca6f-2abd-4853-96fe-0d440ef447b2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Response has containerID\", function () {",
							"    pm.expect(pm.response.text()).to.include(container);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{carrier-host}}/api/v1/container/{{containerID}}/custodian",
					"protocol": "https",
					"host": [
						"{{carrier-host}}"
					],
					"path": [
						"api",
						"v1",
						"container",
						"{{containerID}}",
						"custodian"
					]
				},
				"description": "Claims custondianship of container and all products inside"
			},
			"response": []
		},
		{
			"name": "Manufacturer checks Container is not owned",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "351b4f10-b093-49ad-a9fc-2083f613cb1c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check Container is not owned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"unowned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
				},
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/{{containerID}}/scan",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{containerID}}",
						"scan"
					]
				},
				"description": "Get container states"
			},
			"response": []
		},
		{
			"name": "Warehouse claims Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "126dacc0-4c30-49c0-b24b-a989ab2bfa71",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Response has containerID\", function () {",
							"    pm.expect(pm.response.text()).to.include(container);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{warehouse-host}}/api/v1/container/{{containerID}}/custodian",
					"protocol": "https",
					"host": [
						"{{warehouse-host}}"
					],
					"path": [
						"api",
						"v1",
						"container",
						"{{containerID}}",
						"custodian"
					]
				},
				"description": "Claims custondianship of container and all products inside"
			},
			"response": []
		},
		{
			"name": "Carrier checks Container is not owned",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "351b4f10-b093-49ad-a9fc-2083f613cb1c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check Container is not owned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"unowned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
				},
				"url": {
					"raw": "https://{{carrier-host}}/api/v1/{{containerID}}/scan",
					"protocol": "https",
					"host": [
						"{{carrier-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{containerID}}",
						"scan"
					]
				},
				"description": "Get container states"
			},
			"response": []
		},
		{
			"name": "Store claims Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9ada31d-7848-4a51-b41c-0dee374ce3db",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const container = pm.environment.get(\"containerID\");",
							"pm.test(\"Response has containerID\", function () {",
							"    pm.expect(pm.response.text()).to.include(container);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{store-host}}/api/v1/container/{{containerID}}/custodian",
					"protocol": "https",
					"host": [
						"{{store-host}}"
					],
					"path": [
						"api",
						"v1",
						"container",
						"{{containerID}}",
						"custodian"
					]
				},
				"description": "Claims custondianship of container and all products inside"
			},
			"response": []
		},
		{
			"name": "Warehouse checks Container is not owned",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "351b4f10-b093-49ad-a9fc-2083f613cb1c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check Product is owned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"unowned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
				},
				"url": {
					"raw": "https://{{warehouse-host}}/api/v1/{{containerID}}/scan",
					"protocol": "https",
					"host": [
						"{{warehouse-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{containerID}}",
						"scan"
					]
				},
				"description": "Get container states"
			},
			"response": []
		},
		{
			"name": "Store checks Container is owned",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "490b7f30-8d33-43b6-af00-c312fa00ea54",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check Product is owned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"owned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
				},
				"url": {
					"raw": "https://{{store-host}}/api/v1/{{containerID}}/scan",
					"protocol": "https",
					"host": [
						"{{store-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{containerID}}",
						"scan"
					]
				},
				"description": "Get container states"
			},
			"response": []
		},
		{
			"name": "Store checks Product is owned",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b6957c7-dd9b-4390-ab7a-b91c1668f9a5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check Product is owned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"owned\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"health\": \"String\",\n \"contents\": [],\n \"otherData\": \"String\",\n \"trackingID\": \"{{containerID}}\",\n \"containerID\": null,\n \"counterparties\": [\"Manufacturer\"]\n}"
				},
				"url": {
					"raw": "https://{{store-host}}/api/v1/{{productID}}/scan",
					"protocol": "https",
					"host": [
						"{{store-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{productID}}",
						"scan"
					]
				},
				"description": "Get container states"
			},
			"response": []
		},
		{
			"name": "Container History",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7899d4fc-29e5-4304-9f14-85a62ca0964e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var array = pm.response.json();",
							"console.log(array);",
							"pm.test(\"Check there are 3 timestamps\", function () {",
							"    pm.expect(array.length).to.eql(4);",
							"});",
							"",
							"pm.test(\"Check for Manufacturer\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"manufacturerID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Carrier\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"carrierID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Warehouse\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"warehouseID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Store\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"storeID\").toLowerCase());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{store-host}}/api/v1/{{containerID}}/history",
					"protocol": "https",
					"host": [
						"{{store-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{containerID}}",
						"history"
					]
				},
				"description": "Method to see tracking history of an item as it was modified and what time ownership changed (in milliseconds from some root time like Jan 1990 or something)"
			},
			"response": [
				{
					"name": "History of item created at A, moved to B, and moved to A again",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/9e029d9d-c3e8-4b74-96e9-14250aecdf2f/history",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"9e029d9d-c3e8-4b74-96e9-14250aecdf2f",
								"history"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "214"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:52:46 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565435354\n    },\n    {\n        \"party\": \"O=PartyB, L=New York, C=US\",\n        \"time\": 1549565524382\n    },\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565561769\n    }\n]"
				}
			]
		},
		{
			"name": "Product History",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7899d4fc-29e5-4304-9f14-85a62ca0964e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var array = pm.response.json();",
							"console.log(array);",
							"pm.test(\"Check there are 3 timestamps\", function () {",
							"    pm.expect(array.length).to.eql(4);",
							"});",
							"",
							"pm.test(\"Check for Manufacturer\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"manufacturerID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Carrier\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"carrierID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Warehouse\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"warehouseID\").toLowerCase());",
							"});",
							"pm.test(\"Check for Store\", function () {",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(pm.environment.get(\"storeID\").toLowerCase());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{manufacturer-host}}/api/v1/{{productID}}/history",
					"protocol": "https",
					"host": [
						"{{manufacturer-host}}"
					],
					"path": [
						"api",
						"v1",
						"{{productID}}",
						"history"
					]
				},
				"description": "Method to see tracking history of an item as it was modified and what time ownership changed (in milliseconds from some root time like Jan 1990 or something)"
			},
			"response": [
				{
					"name": "History of item created at A, moved to B, and moved to A again",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/9e029d9d-c3e8-4b74-96e9-14250aecdf2f/history",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"9e029d9d-c3e8-4b74-96e9-14250aecdf2f",
								"history"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "214"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Feb 2019 18:52:46 GMT"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565435354\n    },\n    {\n        \"party\": \"O=PartyB, L=New York, C=US\",\n        \"time\": 1549565524382\n    },\n    {\n        \"party\": \"O=PartyA, L=London, C=GB\",\n        \"time\": 1549565561769\n    }\n]"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}