# Remove all Helm releases of organization
- name: Remove all Helm releases of organization {{ organization }}
  args:
    executable: /bin/bash
  shell: |
    helm_releases=($(KUBECONFIG={{ kubernetes.config_file }} helm ls -a | grep {{ organization }}- | awk '{print $1}'))
    for helm_release in "${helm_releases[@]}"
    do
      KUBECONFIG={{ kubernetes.config_file }} helm uninstall ${helm_release}
    done

# Get all existing Cluster Role Bindings of organization
- name: Get all existing Cluster Role Bindings of organization {{ organization }}
  k8s_info:
    kind: ClusterRoleBinding
    kubeconfig: "{{ kubernetes.config_file }}"
    namespace: "default"
    label_selectors:
      - organization = {{ organization }}
  register: rolelist

# Remove an existing Cluster Role Binding
- name: Remove an existing Cluster Role Binding of {{ organization }}
  k8s:
    state: absent
    kind : ClusterRoleBinding
    kubeconfig: "{{ kubernetes.config_file }}"
    namespace: "default"
    name: "{{ item.metadata.name }}"
  loop: "{{ rolelist.resources }}"
  loop_control:
    loop_var: item
  when: rolelist is defined

# Remove an existing Namespace
- name: Remove an existing Namespace {{ organization_ns }}
  k8s:
    state: absent
    kind: Namespace
    kubeconfig: "{{ kubernetes.config_file }}"
    namespace: "{{ organization_ns }}"
    name: "{{ organization_ns }}"

# Remove an existing Storage Class
- name: Remove an existing Storage Class of {{ organization }}
  vars:
    provider: "{{ organizationItem.cloud_provider }}"
    storageclass_name: "{{ provider }}-storageclass"
    component_name: "{{ organization }}-{{ storageclass_name }}"
  k8s:
    state: absent
    kind: StorageClass
    kubeconfig: "{{ kubernetes.config_file }}"
    namespace: "default"
    name: "{{ component_name }}"
