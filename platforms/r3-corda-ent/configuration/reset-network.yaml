# This playbook deletes the DLT network on existing Kubernetes clusters which has been created
#  using the Blockchain Automation Framework.
# Please use the same network.yaml to run this playbook as used for deploy-network.yaml
###########################################################################################
# THIS PLAYBOOK DELETES EVERYTHING, EVEN NAMESPACES and FLUX
###########################################################################################
---
  # This will apply to ansible_provisioners. /etc/ansible/hosts should be configured with this group
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
    # ----------------------------------------------------------------------
    # Delete Gitops file and check-in
    - include_role:
        name: "delete/gitops_files"
      vars:
        gitops: "{{ org.gitops }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org
    
    # ----------------------------------------------------------------------
    # Delete Gitops file for firewall float when enabled
    - include_role:
        name: "delete/gitops_files"
      vars:
        gitops: "{{ org.services.float.gitops }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org
      when: org.firewall is defined and org.firewall.enabled

    # ----------------------------------------------------------------------
    # Delete Vault and Kubernetes secrets.
    - include_role: 
        name: "delete/vault_secrets"
      vars: 
        gitops: "{{ org.gitops }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org

    # ----------------------------------------------------------------------
    # Uninstalling Flux is needed so that everything is clean
    # remove this if not needed
    - name: Uninstall flux
      shell: |
        KUBECONFIG={{ org.k8s.config_file }} kubectl delete secret git-auth-{{ network.env.type }} -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.k8s.config_file }} helm uninstall flux-{{ network.env.type }} -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.k8s.config_file }} helm uninstall flux-{{ network.env.type }}-helm-operator -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.k8s.config_file }} kubectl delete namespace flux-{{ network.env.type }}
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org
      ignore_errors: yes

    # ----------------------------------------------------------------------
    # Uninstalling Flux is needed so that everything is clean
    - name: Uninstall flux from float cluster
      shell: |
        KUBECONFIG={{ org.services.float.k8s.config_file }} kubectl delete secret git-auth-{{ network.env.type }} -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.services.float.k8s.config_file }} helm uninstall flux-{{ network.env.type }} -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.services.float.k8s.config_file }} helm uninstall flux-{{ network.env.type }}-helm-operator -n flux-{{ network.env.type }}
        KUBECONFIG={{ org.services.float.k8s.config_file }} kubectl delete namespace flux-{{ network.env.type }}
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org
      ignore_errors: yes
      when: org.type =='node' is defined and org.firewall.enabled

    # ----------------------------------------------------------------------
    # Delete Helmreleases
    - include_role:
        name: "delete/flux_releases"
      vars:
        component_ns: "{{ org.name | lower }}-ent"
        k8s: "{{ org.k8s }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org

    # ----------------------------------------------------------------------
    # Delete Helmreleases for the float the cluster
    - include_role:
        name: "delete/flux_releases"
      vars:
        component_ns: "{{ org.name | lower }}-ent"
        k8s: "{{ org.services.float.k8s }}"
      loop: "{{ network['organizations'] }}"
      loop_control:
        loop_var: org
      when: org.type =='node' and org.firewall.enabled

    # ----------------------------------------------------------------------
    # delete build directory
    - name: Remove build directory
      file:
        path: "./build"
        state: absent

  vars: #These variables can be overriden from the command line
    privilege_escalate: false           #Default to NOT escalate to root privledges
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    bin_install_dir:  "~/bin"            #Default to /bin install directory for binaries
