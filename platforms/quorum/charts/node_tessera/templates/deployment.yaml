apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.node.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  name: {{ .Values.node.name }}
spec:
  serviceName: {{ .Values.node.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consortiumchain
      service.rpc: {{ .Values.node.name }}
      app.kubernetes.io/name: {{ .Values.node.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: consortiumchain
        name: {{ .Values.node.name }}
        service.rpc: {{ .Values.node.name }}
        app.kubernetes.io/name: {{ .Values.node.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.node.name }}
      imagePullSecrets:
          - name: {{ .Values.node.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: mysql
          emptyDir:
            medium: Memory
        - name: {{ .Values.node.name }}-genesis-volume
          configMap:
            name: genesis-{{ .Values.node.name }}
            items:
              - key: genesis.json.base64
                path: genesis.json.base64
        - name: tessera-config
          configMap:
            name: tessera-config-{{ .Values.node.name }}
            items:
              - key: tessera-config.json.tmpl
                path: tessera-config.json.tmpl
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: MOUNT_PATH
          value: "/secret"
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash
          
          validateVaultResponse () {
          if echo ${2} | grep "errors"; then
           echo "ERROR: unable to retrieve ${1}: ${2}"
           exit 1
           fi
          }
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          #Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 5 keys from $vault_secret_key"          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
          nodekey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["nodekey"]')
          keystore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')
          gethpassword=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["gethpassword"]')
          username=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["db_user"]')
          password=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["db_password"]')
          
          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}
          
          echo -n "${gethpassword}" > ${OUTPUT_PATH}/passwords.txt
          echo -n "${nodekey}" > ${OUTPUT_PATH}/nodekey
          echo -n "${keystore}" > ${OUTPUT_PATH}/{{ .Values.node.keystore }}
          echo "${username}" > ${OUTPUT_PATH}/username
          echo "${password}" > ${OUTPUT_PATH}/password

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.tm_keyname }}"
          echo "Getting 2 keys from $vault_secret_key"          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 

          tmpub=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tm.pub"]')
          tmkey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tm.key"]')
          echo -n "${tmpub}" > ${OUTPUT_PATH}/tm.pub
          echo -n "${tmkey}" > ${OUTPUT_PATH}/tm.key
         
        volumeMounts:
        - name: certificates
          mountPath: /secret
      - name: mysql-init
        image: {{ .Values.images.busybox }}
        command: ["/bin/sh"]
        args:
        - "-cx"
        - |-
          #!/bin/bash

          echo "getting username and password from vault"          
          var=$(cat /secret/keys/password)         
          cat << EOF > /docker-entrypoint-initdb.d/createTables.sql
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'demouser';
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'root';
          CREATE TABLE IF NOT EXISTS ENCRYPTED_TRANSACTION (ENCODED_PAYLOAD BLOB NOT NULL, HASH VARBINARY(100) NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (HASH));
          CREATE TABLE IF NOT EXISTS ENCRYPTED_RAW_TRANSACTION (ENCRYPTED_KEY BLOB NOT NULL, ENCRYPTED_PAYLOAD BLOB NOT NULL, NONCE BLOB NOT NULL, SENDER BLOB NOT NULL, TIMESTAMP BIGINT, HASH VARBINARY(100) NOT NULL, PRIMARY KEY (HASH));
          EOF
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
      - name: quorum-genesis-init-container
        image: "{{ .Values.images.node }}"
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p $QUORUM_DATA_DIR;
          cat {{ .Values.node.mountPath }}/genesis/genesis.json.base64 | base64 -d > $QUORUM_DATA_DIR/genesis.json;
            if [ ! -f $QUORUM_DATA_DIR/genesis_created ]; then
              echo \"running geth init\";
              /usr/local/bin/geth --datadir $QUORUM_DATA_DIR init $QUORUM_DATA_DIR/genesis.json;
              date > $QUORUM_DATA_DIR/genesis_created;
            fi;
          "
        env:
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
          - name: QHOME
            value: {{ .Values.node.mountPath }}
        volumeMounts:
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
        - name: {{ .Values.node.name }}-genesis-volume
          mountPath: {{ .Values.node.mountPath }}/genesis
      containers:
      - name: mysql-db
        image: {{ .Values.images.mysql }}
        imagePullPolicy: Always
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          value: ""
        - name: MYSQL_DATABASE
          value: "{{ .Values.node.dbname }}"
        - name: MYSQL_USER
          value: "{{ .Values.node.mysqluser }}"
        - name: MYSQL_PASSWORD
          value: /secret/keys/password
        ports:
          - containerPort: {{ .Values.node.ports.db }}
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
        - name: {{ .Values.node.name }}-mysql
          mountPath: "/var/lib/mysql"
          subPath: mysql
      - name: tessera
        image: {{ .Values.images.tessera }}
        command: ["sh"]
        args:
        - "-cx"
        - "chmod 600 $QUORUM_HOME/crypto/keys/tm.key;
          mkdir -p $QUORUM_HOME/logs;
          mkdir -p $QUORUM_HOME/tm;
          DDIR=$QUORUM_HOME/tm;
          PASSWORD=$(cat $QUORUM_HOME/crypto/keys/password);

          printenv;
          wget -q http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.25.tar.gz;
          tar -xf mysql-connector-java-8.0.25.tar.gz;
          cp /mysql-connector-java-8.0.25/mysql-connector-java-8.0.25.jar $QUORUM_HOME;
          SQL_JAR=$QUORUM_HOME/mysql-connector-java-8.0.25.jar;

          # Extracting version from manifest incase we want to add version specific steps/config
          TESSERA_VERSION=$(unzip -p /tessera/tessera-app.jar META-INF/MANIFEST.MF | grep Tessera-Version | cut -d\" \" -f2);
          echo \"Tessera version (extracted from manifest file): ${TESSERA_VERSION}\";
          
          TESSERA_JAR=/tessera/tessera-app.jar;
           
          CONFIG_TMPL=$(cat ${QUORUM_HOME}/tessera-config.json.tmpl);
          CONFIG_FINAL=$(echo $CONFIG_TMPL | sed \"s@%THIS_PRIV_KEY%@${QUORUM_HOME}/crypto/keys/tm.key@g\" |  sed \"s@%THIS_PUB_KEY%@${QUORUM_HOME}/crypto/keys/tm.pub@g\");
          
          echo $CONFIG_FINAL >  ${DDIR}/tessera-config-with-hosts.json;
          cat  ${DDIR}/tessera-config-with-hosts.json;

          TESSERA_MAIN=com.quorum.tessera.launcher.Main;
          java -Xms128M -Xmx128M -cp $SQL_JAR:$TESSERA_JAR:. $TESSERA_MAIN -configfile ${DDIR}/tessera-config-with-hosts.json -o jdbc.password=$PASSWORD;
        "
        ports:
          - containerPort: {{ .Values.node.ports.tm }}
        env:
          - name: QUORUM_HOME
            value: {{ .Values.node.mountPath }}
          - name: QHOME
            value: {{ .Values.node.mountPath }}
        volumeMounts:
          - name: certificates
            mountPath: {{ .Values.node.mountPath }}/crypto/
          - name: {{ .Values.node.name }}-pv
            mountPath: {{ .Values.node.mountPath }}
          - name: tessera-config
            mountPath: {{ .Values.node.mountPath }}/tessera-config.json.tmpl
            subPath: tessera-config.json.tmpl
      - name: quorum
        image: "{{ .Values.images.node }}"
        command: ["sh"]
        args:
        - "-cx"
        - |-
          #!/usr/bin/env sh
          apk add curl;
          echo -n {{ .Values.staticnodes | toJson | quote }} > $QUORUM_DATA_DIR/static-nodes.json
          mkdir -p $QUORUM_DATA_DIR/geth
          mkdir -p $QUORUM_DATA_DIR/keystore          
          # touch $qd/passwords.txt
          cp $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }} $QUORUM_DATA_DIR/keystore/
          cp $QUORUM_HOME/crypto/keys/nodekey $QUORUM_DATA_DIR/geth/
          cp $QUORUM_HOME/crypto/keys/passwords.txt $QUORUM_DATA_DIR/password.txt

          rm -f $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }}
          rm -f $QUORUM_HOME/crypto/keys/nodekey
          rm -f $QUORUM_HOME/crypto/keys/passwords.txt

          until $(curl -k --output /dev/null --silent --head --fail {{ .Values.tessera.url }}/upcheck); do echo 'waiting for transaction manager to start...'; sleep 5; done;
          echo transaction manager is up;

          args=""
          NODE_STATUS=""
          if [ $CONSENSUS == 'raft' ]; then
            NODE_STATUS={{ .Values.node.status }}
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'additional' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --rpcapi admin,debug,web3,eth,txpool,personal,miner,net,quorumExtension,raft --raftjoinexisting {{ .Values.node.peer_id }}";
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'default' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --rpcapi admin,debug,web3,eth,txpool,personal,raft,miner,net,quorumExtension";
          fi;
          if [ $CONSENSUS == 'ibft' ]; then
            args=" --istanbul.blockperiod 3 --syncmode full --mine --miner.threads 1 --rpcapi admin,debug,web3,eth,txpool,personal,istanbul,miner,net,quorumExtension"
                                                                                              
            
          fi;

          LOCK_STATUS={{ .Values.node.lock }}
          if [ $LOCK_STATUS = false ]
          then
            args=" ${args} --unlock 0 "
          fi

          /usr/local/bin/geth \
           --datadir $QUORUM_DATA_DIR \
           $args \
           --identity {{ .Values.node.subject | quote }} \
           --vmdebug \
           --gcmode=archive \
           --nodiscover \
           --nat=none \
           --verbosity 9 \
           --emitcheckpoints \
           --rpc \
           --rpcaddr 0.0.0.0 \
           --rpcport {{ .Values.node.ports.rpc }} \
           --rpcvhosts=* \
           --allow-insecure-unlock \
           --port {{ .Values.node.ports.quorum }} \
           --password $QUORUM_DATA_DIR/password.txt 2>&1 | tee -a $QUORUM_HOME/logs/quorum.log;
        ports:
          - containerPort: {{ .Values.node.ports.rpc }}
          - containerPort: {{ .Values.node.ports.quorum }}
{{- if eq $.Values.node.consensus "raft" }}
          - containerPort: {{ .Values.node.ports.raft }}
{{- end }}
        env:
          - name: PRIVATE_CONFIG
            value: {{ .Values.node.mountPath }}/tm/tm.ipc
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
          - name: QUORUM_HOME
            value: {{ .Values.node.mountPath }}
          - name: QHOME
            value: {{ .Values.node.mountPath }}
          - name: TM_HOME
            value: {{ .Values.node.mountPath }}/tm/
          - name: CONSENSUS
            value: {{ .Values.node.consensus }}
        volumeMounts:
        - name: certificates
          mountPath: {{ .Values.node.mountPath }}/crypto/
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.node.name }}-pv
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
    - metadata:
        name: {{ .Values.node.name }}-mysql     
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}    
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.dbstorage }}
