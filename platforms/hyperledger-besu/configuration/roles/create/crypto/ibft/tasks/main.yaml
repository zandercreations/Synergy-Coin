# Set node_list to empty
- name: Set node_list to empty
  set_fact:
    node_list: []

# This tasks checks the crypto material in the vault
- name: Check for the crypto material in the vault
  include_tasks: check_vault.yaml
  vars:
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This task fetch (org,node) pairs for each validating node present in all organizations of the network
- name: Fetching data of validator nodes in the network from network.yaml
  include_tasks: node_data.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: generate_crypto is defined and generate_crypto == True

# This task creates the build directory
- name: Create build directory if it does not exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "{{ playbook_dir }}/build"
    check: "ensure_dir"
  when: generate_crypto is defined and generate_crypto == True

# This task creates the bin directory, if it doesn't exist, for storing the geth binary
- name: Create bin directory
  file:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    state: directory
  when: generate_crypto is defined and generate_crypto == True

# Check if besu binary already exists
- name: check besu binary
  stat:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}/besu"
  register: besu_stat_result
  when: generate_crypto is defined and generate_crypto == True

# Create a temporary directory to download and extract besu tar
- name: register temporary directory
  tempfile:
    state: directory
  register: tmp_directory
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task fetches the besu tar file from the mentioned URL
- name: "Geting the besu binary tar"
  get_url:
    url: https://bintray.com/hyperledger-org/besu-repo/download_file?file_path=besu-{{ network.version }}.tar.gz
    dest: "{{ tmp_directory.path }}"
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task unzips the above downloaded tar file
- name: "Unziping the downloaded file"
  unarchive:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}.tar.gz"
    dest: "{{ tmp_directory.path }}"
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task extracts the besu binary and place it at appropriate path
- name: "Moving the besu from the extracted folder and place in it path"
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/bin/besu"
    dest: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    mode: 0755
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task extracts the supporting besu.bat and place it at appropriate path
- name: "Moving the besu dependencies from the extracted folder and place in it path"
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/lib"
    dest: "{{ bin_install_dir }}/besu"
    mode: 0755
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task creates the ibftConfigFile.json file from the template
- name: Create ibftConfigFile.json
  template:
    src: "ibftConfigFile.tpl"
    dest: "{{ build_path }}/ibftConfigFile.json"
  vars:
    total_peer_count: "{{ node_list | length }}"
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task displays the ibftConfigFile file content
- name: Display ibftConfigFile file contents
  debug: 
    msg: "The ibftConfigFile file is: {{ lookup('file', '{{ playbook_dir }}/build/ibftConfigFile.json') }}"
    verbosity: 2
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# Generate crypto for IBFT consensus
- name: Generate crypto for IBFT consensus
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu operator generate-blockchain-config --config-file={{ build_path }}/ibftConfigFile.json --to={{ build_path }}/crypto --private-key-file-name=key
  when: 
    - network.config.consensus == "ibft" and generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task get the list of folders
- name: Find folders
  find:
    path: "{{ build_path }}/crypto/keys"
    file_type: directory
    recurse: false
  register: folder
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task rename the above created directories to the org_name/node_name 
- name: Rename the directories created above with the elements of node_list
  copy: src={{ file.path }}/ dest={{ build_path }}/crypto/{{node_list[index].org}}/{{node_list[index].node}}/data
  loop: "{{ folder.files }}"
  loop_control:
    loop_var: file
    index_var: index
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task creates the organization directories for crypto material if not exists
- name: Create organization directory if it does not exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "{{ playbook_dir }}/{{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data"
    check: "ensure_dir"
  with_indexed_items: "{{ node_list }}"
  when:  
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == True

# This task creates the node address for each peer 
- name: Generate the nodeAddress for each peer
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu --data-path {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data public-key export-address --to {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data/nodeAddress
  with_indexed_items: "{{ node_list }}"
  when: generate_crypto is defined and generate_crypto == True

# This task creates the node public key for each peer of new organization 
- name: Generate the key.pub for each peer of new organization
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu --data-path {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data public-key export --to {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data/key.pub
  with_indexed_items: "{{ node_list }}"
  when:  
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is defined and add_new_org|bool == True

# This file stores the address of the validator nodes
- name: Touch file to store information for validators
  file:
    path: "{{ build_path }}/validatorinfo"
    state: touch
  when:  
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This file used by besu binary to generate the extra data information
- name: Touch toEncode.json file
  file:
    path: "{{ build_path }}/toEncode.json"
    state: touch
  when:  
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# new genesis file with updated extradata
- name: Touch modified genesis file
  file:
    path: "{{ build_path }}/crypto/newGenesis.json"
    state: touch
  when:  
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# Create the validator address array
- name: Get node data
  shell: |
    echo "\"$(cat {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data/nodeAddress)\"" >> {{ build_path }}/validatorinfo
  with_indexed_items: "{{ node_list }}"
  when:  
    - item[1].type == "validator"
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task creates the rlp encoded string and add it to extraData field in newGenesis.json
- name: Create the new genesis file with information for validator nodes
  shell: |
    cat {{ build_path }}/validatorinfo | paste -sd "," -| awk '{print "["$0"]"}'> {{ build_path }}/toEncode.json
    echo "$( {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu rlp encode --from={{ build_path }}/toEncode.json )" > {{ build_path }}/extraData
    jq '.extraData = $newVal' --arg newVal $(cat {{ build_path }}/extraData) << cat {{ build_path }}/crypto/genesis.json > {{ build_path }}/crypto/newGenesis.json
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False
    
## Delete the keys directory
- name: Delete the keys directory
  file:
    path: "{{ build_path }}/crypto/keys"
    state: absent
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task writes the genesis base64 data to the file
- name: write the genesis file
  copy:
    content: "{{ genesis }}"
    dest: "{{ network.config.genesis }}"
  vars:
    genesis: "{{ lookup('file', '{{ build_path }}/crypto/newGenesis.json') | b64encode }}"
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False
 
# This tasks copy the crypto material to the vault
- name: Copy the crypto material to Vault
  include_tasks: add_to_vault.yaml
  vars:
    component_name: "{{ org.name | lower }}"
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
    peers: "{{ org.services.peers }}"
    genesis: "{{ lookup('file', '{{ build_path }}/crypto/newGenesis.json') | b64encode }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: generate_crypto is defined and generate_crypto == True
