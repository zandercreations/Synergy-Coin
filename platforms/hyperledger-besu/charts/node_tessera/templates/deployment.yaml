apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.tessera.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  name: {{ .Values.tessera.name }}
spec:
  serviceName: {{ .Values.tessera.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      service.rpc: {{ .Values.tessera.name }}
      app.kubernetes.io/name: {{ .Values.tessera.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
  template:
    metadata:
      creationTimestamp: null
      labels:        
        name: {{ .Values.tessera.name }}
        service.rpc: {{ .Values.tessera.name }}
        app.kubernetes.io/name: {{ .Values.tessera.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.tessera.name }}
      imagePullSecrets:
          - name: {{ .Values.images.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: mysql
          emptyDir:
            medium: Memory        
        - name: tessera-config
          configMap:
            name: tessera-config-{{ .Values.tessera.name }}
            items:
              - key: tessera-config.json.tmpl
                path: tessera-config.json.tmpl
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: MOUNT_PATH
          value: "/secret"
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash
          
          validateVaultResponse () {
          if echo ${2} | grep "errors"; then
           echo "ERROR: unable to retrieve ${1}: ${2}"
           exit 1
           fi
          }
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          #Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 2 keys from $vault_secret_key"          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
          nodekey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["nodekey"]')
          keystore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 3 keys from $vault_secret_key"          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
          gethpassword=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["gethpassword"]')
          username=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["db_user"]')
          password=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["db_password"]')
          
          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}
          
          echo -n "${gethpassword}" > ${OUTPUT_PATH}/passwords.txt
          echo -n "${nodekey}" > ${OUTPUT_PATH}/nodekey
          echo -n "${keystore}" > ${OUTPUT_PATH}/keystore
          echo "${username}" > ${OUTPUT_PATH}/username
          echo "${password}" > ${OUTPUT_PATH}/password

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.tm_keyname }}"
          echo "Getting 2 keys from $vault_secret_key"          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 

          tmpub=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["key_pub"]')
          tmkey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["key"]' | base64 -d )
          echo -n "${tmpub}" > ${OUTPUT_PATH}/tm.pub
          echo -n "${tmkey}" > ${OUTPUT_PATH}/tm.key
          
          if [ {{ $.Values.tessera.tls }} == "STRICT" ]
          then
            vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.tlsdir }}" 
            LOOKUP_SECRET_RESPONSE=$(curl -sS \
              --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key} | \
              jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
            tessera_ca=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["rootca_pem"]' | base64 -d)  
            tessera_cer_pem=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["ambassadorcrt"]' | base64 -d)    
            tessera_cer_key=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["ambassadorkey"]' | base64 -d) 
            tessera_known_server=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["knownServer"]'| base64 -d) 
            keystore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')  
            keystore_password=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["password"]' | base64 -d)
            echo "${tessera_ca}" > ${MOUNT_PATH}/tessera_ca.pem
            echo "${tessera_cer_pem}" > ${MOUNT_PATH}/tessera_cer.pem
            echo "${tessera_cer_key}" > ${MOUNT_PATH}/tessera_cer.key
            echo "${tessera_known_server}" > ${MOUNT_PATH}/known_server
            echo "${tessera_known_server}" > ${MOUNT_PATH}/known_client
            echo "${keystore}" > ${MOUNT_PATH}/keystore
            base64 -d ${MOUNT_PATH}/keystore > ${MOUNT_PATH}/keystore.pkcs12
            echo "${keystore_password}" > ${MOUNT_PATH}/keystore_password
          fi 
         
        volumeMounts:
        - name: certificates
          mountPath: /secret
      - name: mysql-init
        image: {{ .Values.images.busybox }}
        command: ["/bin/sh"]
        args:
        - "-cx"
        - |-
          #!/bin/bash

          echo "getting username and password from vault"          
          var=$(cat /secret/keys/password)         
          cat << EOF > /docker-entrypoint-initdb.d/createTables.sql
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'demouser';
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'root';
          CREATE TABLE IF NOT EXISTS ENCRYPTED_TRANSACTION (ENCODED_PAYLOAD BLOB NOT NULL, HASH VARBINARY(100) NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (HASH));
          CREATE TABLE IF NOT EXISTS ENCRYPTED_RAW_TRANSACTION (ENCRYPTED_KEY BLOB NOT NULL, ENCRYPTED_PAYLOAD BLOB NOT NULL, NONCE BLOB NOT NULL, SENDER BLOB NOT NULL, TIMESTAMP BIGINT, HASH VARBINARY(100) NOT NULL, PRIMARY KEY (HASH));
          CREATE TABLE IF NOT EXISTS PRIVACY_GROUP(ID VARBINARY(100) NOT NULL, LOOKUP_ID BLOB NOT NULL, DATA BLOB NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (ID));
          EOF
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret      
      containers:
      - name: mysql-db
        image: {{ .Values.images.mysql }}
        imagePullPolicy: Always
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          value: ""
        - name: MYSQL_DATABASE
          value: "{{ .Values.tessera.dbname }}"
        - name: MYSQL_USER
          value: "{{ .Values.tessera.dbusername }}"
        - name: MYSQL_PASSWORD
          value: /secret/keys/password
        ports:
          - containerPort: {{ .Values.tessera.ports.db }}
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
        - name: {{ .Values.tessera.name }}-mysql
          mountPath: "/var/lib/mysql"
          subPath: mysql
      - name: tessera
        image: {{ .Values.images.tessera }}
        command: ["sh"]
        args:
        - "-cx"
        - "chmod 600 $TESSERA_HOME/crypto/keys/tm.key;
          mkdir -p $TESSERA_HOME/logs;
          mkdir -p $TESSERA_HOME/tm;
          DDIR=$TESSERA_HOME/tm;
          PASSWORD=$(cat $TESSERA_HOME/crypto/keys/password);

          printenv;
          wget -q http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.15.tar.gz;
          tar -xf mysql-connector-java-8.0.15.tar.gz;
          cp /mysql-connector-java-8.0.15/mysql-connector-java-8.0.15.jar $TESSERA_HOME;
          SQL_JAR=$TESSERA_HOME/mysql-connector-java-8.0.15.jar;

          TESSERA_JAR=/tessera/tessera-app.jar;
          CONFIG_TMPL=$(cat ${TESSERA_HOME}/tessera-config.json.tmpl);

          echo $CONFIG_TMPL >  ${DDIR}/tessera-config-with-hosts.json;
          cat  ${DDIR}/tessera-config-with-hosts.json;

          TESSERA_MAIN=com.quorum.tessera.launcher.Main;
          java -Xms128M -Xmx128M -cp $SQL_JAR:$TESSERA_JAR:. $TESSERA_MAIN --configfile ${DDIR}/tessera-config-with-hosts.json -o jdbc.password=$PASSWORD;
        "
        ports:
          - containerPort: {{ .Values.tessera.ports.tm }}
        env:
          - name: TESSERA_HOME
            value: {{ .Values.tessera.mountPath }}
          - name: QHOME
            value: {{ .Values.tessera.mountPath }}
        volumeMounts:
          - name: certificates
            mountPath: {{ .Values.tessera.mountPath }}/crypto/
          - name: {{ .Values.tessera.name }}-pv
            mountPath: {{ .Values.tessera.mountPath }}
          - name: tessera-config
            mountPath: {{ .Values.tessera.mountPath }}/tessera-config.json.tmpl
            subPath: tessera-config.json.tmpl          
      restartPolicy: Always
  volumeClaimTemplates: 
    - metadata:
        name: {{ .Values.tessera.name }}-pv
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
    - metadata:
        name: {{ .Values.tessera.name }}-mysql     
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}    
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.dbstorage }}
